version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.2.0
  terraform: circleci/terraform@1.1.0


# Custom YAML anchors

prod-branch: &prod-branch
  filters:
    branches:
      only:
        - master

staging-branch: &staging-branch
  filters:
    branches:
      only:
        - develop

build-image: &build-image
  executor: machine-with-cache
  pre-steps:
    - update-submodules
  dockerfile: Dockerfile
  account-url: AWS_ECR_ACCOUNT_URL
  aws-access-key-id: AWS_ACCESS_KEY_ID
  aws-secret-access-key: AWS_SECRET_ACCESS_KEY
  region: AWS_REGION
  tag: "${CIRCLE_SHA1}"

update-service: &update-service
  # Needs to have the dollar symbol even though the ones above do not.
  aws-region: $AWS_REGION
  container-image-name-updates: "container=backend,tag=${CIRCLE_SHA1},container=frontend,tag=${CIRCLE_SHA1}"


# CicleCI's own sections

executors:
  machine-with-cache:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true

  machine-no-cache:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: false

commands:
  update-submodules:
    steps:
      - checkout
      - run:
          name: "Update submodules"
          command: git submodule update --init --recursive

jobs:
  test-backend:
    executor: machine-with-cache
    steps:
      - update-submodules
      - run:
          name: "Run linter, type-check, and tests"
          command: >
            cd backend
            && docker-compose --file docker-compose-circleci.yml up --build --abort-on-container-exit

  test-frontend:
    executor: machine-with-cache
    steps:
      - update-submodules
      - run:
          name: "Run linter and type-check"
          command: >
            cd frontend
            && docker build --target circleci --tag frontend .
            && docker run frontend

  check-commits:
    executor: machine-no-cache
    steps:
      - update-submodules
      - run:
          name: "Check commits of the PR branch"
          command: ./.circleci/check_commits.sh
      - run:
          name: "Check submodule commit branches"
          command: ./.circleci/check_submodules.sh

workflows:
  check-commits:
    jobs:
      - check-commits:
          filters:
            branches:
              ignore:
                - master
                - develop

  deploy-prod:
    jobs:
      - terraform/apply:
          name: deploy-infra
          checkout: true
          <<: *prod-branch

      - test-backend:
          <<: *prod-branch

      - test-frontend:
          <<: *prod-branch

      - aws-ecr/build-and-push-image:
          name: build-backend
          repo: backend
          path: backend
          requires:
            - deploy-infra
          <<: *build-image
          <<: *prod-branch

      - aws-ecr/build-and-push-image:
          name: build-frontend
          repo: frontend
          path: frontend
          context: prod
          extra-build-args: "--build-arg API_URL"
          requires:
            - deploy-infra
          <<: *build-image
          <<: *prod-branch

      - aws-ecs/deploy-service-update:
          name: update-prod-service
          requires:
            - test-backend
            - test-frontend
            - build-backend
            - build-frontend
          cluster-name: skole-cluster
          service-name: skole-service
          family: skole-task
          <<: *update-service
          <<: *prod-branch

  deploy-staging:
    jobs:
      - terraform/apply:
          name: deploy-infra
          checkout: true
          <<: *staging-branch

      - aws-ecr/build-and-push-image:
          name: build-staging-backend
          repo: backend-staging
          path: backend
          requires:
            - deploy-infra
          <<: *build-image
          <<: *staging-branch

      - aws-ecr/build-and-push-image:
          name: build-staging-frontend
          repo: frontend-staging
          path: frontend
          context: staging
          extra-build-args: "--build-arg API_URL"
          requires:
            - deploy-infra
          <<: *build-image
          <<: *staging-branch

      - aws-ecs/deploy-service-update:
          name: update-staging-service
          requires:
            - build-staging-backend
            - build-staging-frontend
          cluster-name: skole-staging-cluster
          service-name: skole-staging-service
          family: skole-staging-task
          <<: *update-service
          <<: *staging-branch
