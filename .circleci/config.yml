version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.2.0
  aws-s3: circleci/aws-s3@1.0.16

# Custom YAML anchors

prod-branch: &prod-branch
  filters:
    branches:
      only:
        - master

staging-branch: &staging-branch
  filters:
    branches:
      only:
        - develop

build-backend: &build-backend
  executor: machine-with-cache
  pre-steps:
    - update-submodules
  dockerfile: Dockerfile-prod
  path: backend
  account-url: AWS_ECR_ACCOUNT_URL
  aws-access-key-id: AWS_ACCESS_KEY_ID
  aws-secret-access-key: AWS_SECRET_ACCESS_KEY
  region: AWS_REGION
  tag: "${CIRCLE_SHA1}"

update-service: &update-service
  # Needs to have the dollar symbol even though the ones above do not.
  aws-region: $AWS_REGION
  container-image-name-updates: "container=backend,tag=${CIRCLE_SHA1}"

# CicleCI's own sections

executors:
  machine-with-cache:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true

  machine-no-cache:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: false

commands:
  update-submodules:
    steps:
      - checkout
      - run:
          name: "Update submodules"
          command: git submodule update --init --recursive

jobs:
  test-backend:
    executor: machine-with-cache
    steps:
      - update-submodules
      - run:
          name: "Run linter, type-check, and tests"
          command: >
            cd backend
            && docker-compose --file docker-compose-circleci.yml up --build --abort-on-container-exit

  test-frontend:
    executor: machine-with-cache
    steps:
      - update-submodules
      - run:
          name: "Run linter and type-check"
          command: >
            cd frontend
            && docker build --target circleci --tag frontend .
            && docker run frontend

  build-frontend:
    executor: machine-with-cache
    steps:
      - update-submodules
      - run:
          name: "Build docker image"
          command: >
            cd frontend
            && docker build --file Dockerfile-prod --tag frontend --build-arg API_URL .
      - run:
          name: "Copy build files from container"
          command: >
            mkdir -p /tmp/workspace/out
            && container=$(docker create frontend)
            && docker cp "$container":/home/user/app/out/. /tmp/workspace/out
            && docker rm -v "$container"
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - out

  deploy-frontend:
    executor: machine-no-cache
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - aws-s3/sync:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          from: /tmp/workspace/out
          overwrite: true
          to: "s3://${FRONTEND_S3_BUCKET}"

  check-submodules:
    executor: machine-no-cache
    steps:
      - update-submodules
      - run:
          name: "Check submodule commit branches"
          command: ./submodule_check_circleci.sh

workflows:
  check-submodules:
    jobs:
      - check-submodules:
          filters:
            branches:
              ignore:
                - master
                - develop

  deploy-prod:
    jobs:
      - test-backend:
          <<: *prod-branch

      - test-frontend:
          <<: *prod-branch

      - aws-ecr/build-and-push-image:
          name: build-backend
          repo: backend
          <<: *build-backend
          <<: *prod-branch

      - build-frontend:
          name: build-frontend
          context: prod
          <<: *prod-branch

      - aws-ecs/update-task-definition-from-json:
          name: update-prod-task-definition
          requires:
            - test-backend
            - test-frontend
            - build-backend
            - build-frontend
          pre-steps:
            - checkout
          task-definition-json: task-definition.json
          <<: *prod-branch

      - aws-ecs/deploy-service-update:
          name: update-prod-service
          requires:
            - update-prod-task-definition
          cluster-name: skole-cluster
          service-name: skole-service
          family: skole-task
          <<: *update-service
          <<: *prod-branch
      
      - deploy-frontend:
          name: deploy-prod-frontend
          context: prod
          requires:
            - update-prod-service
          <<: *prod-branch

  deploy-staging:
    jobs:
      - aws-ecr/build-and-push-image:
          name: build-staging-backend
          repo: backend-staging
          <<: *build-backend
          <<: *staging-branch

      - build-frontend:
          name: build-staging-frontend
          context: staging
          <<: *staging-branch

      - aws-ecs/update-task-definition-from-json:
          name: update-staging-task-definition
          requires:
            - build-staging-backend
            - build-staging-frontend
          pre-steps:
            - checkout
          task-definition-json: task-definition-staging.json
          <<: *staging-branch

      - aws-ecs/deploy-service-update:
          name: update-staging-service
          requires:
            - update-staging-task-definition
          cluster-name: skole-staging-cluster
          service-name: skole-staging-service
          family: skole-staging-task
          <<: *update-service
          <<: *staging-branch

      - deploy-frontend:
          name: deploy-staging-frontend
          context: staging
          requires:
            - update-staging-service
          <<: *staging-branch
