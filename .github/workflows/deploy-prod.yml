name: "Deploy Prod"

on:
  push:
    branches: [master]

jobs:
  build-backend:
    name: "Build Backend"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      tag: ${{ steps.build-backend.outputs.tag }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.SKOLE_PAT }}

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@cefc5912bc61e2b5a3b049c839fc283c7712d4e0  # v1.5.8
        with:
          aws-region: eu-central-1

      - name: "Login to ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2  # v1.3.3

      - name: "Build, tag, and push the image to ECR"
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend-prod
          IMAGE_TAG: ${{ github.sha }}
        run: >
          docker build --tag="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" backend
          && docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          && echo "::set-output name=tag::$IMAGE_TAG"

      - name: "Notify Slack"
        if: always()
        uses: rtCamp/action-slack-notify@f565a63638bd3615e76249bffab00fcb9dab90f7  # v2.1.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: "${{ job.status == 'success' && 'good' || 'danger' }}"

  build-frontend:
    name: "Build Frontend"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      tag: ${{ steps.build-frontend.outputs.tag }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.SKOLE_PAT }}

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@cefc5912bc61e2b5a3b049c839fc283c7712d4e0  # v1.5.8
        with:
          aws-region: eu-central-1

      - name: "Login to ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2  # v1.3.3

      - name: "Build, tag, and push the image to ECR"
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend-prod
          IMAGE_TAG: ${{ github.sha }}
          API_URL: ${{ secrets.PROD_API_URL }}
          FRONTEND_URL: ${{ secrets.PROD_FRONTEND_URL }}
          SA_URL: ${{ secrets.PROD_SA_URL }}
          EMAIL_ADDRESS: ${{ secrets.PROD_EMAIL_ADDRESS }}
        run: >
          docker build --build-arg API_URL --build-arg FRONTEND_URL --build-arg SA_URL --build-arg EMAIL_ADDRESS --tag="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" frontend
          && docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          && echo "::set-output name=tag::$IMAGE_TAG"

      - name: "Notify Slack"
        if: always()
        uses: rtCamp/action-slack-notify@f565a63638bd3615e76249bffab00fcb9dab90f7  # v2.1.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: "${{ job.status == 'success' && 'good' || 'danger' }}"

  deploy-prod:
    name: "Deploy Prod"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    needs: [build-backend, build-frontend]
    steps:
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@cefc5912bc61e2b5a3b049c839fc283c7712d4e0  # v1.5.8
        with:
          aws-region: eu-central-1

      - name: "Download task definition"
        run: >
          aws ecs describe-task-definition --task-definition skole-prod-task --query taskDefinition > task-definition.json

      - name: "Update backend tag to task definition"
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c8223377f0fe5ff2b08ca8888edbc875c2e91160  # v1.0.20
        with:
          task-definition: task-definition.json
          container-name: backend_prod
          image: ${{ secrets.AWS_ECR_ACCOUNT_URL }}/backend-prod:${{ needs.build-backend.outputs.tag }}

      - name: "Update frontend tag to task definition"
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c8223377f0fe5ff2b08ca8888edbc875c2e91160  # v1.0.20
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          container-name: frontend_prod
          image: ${{ secrets.AWS_ECR_ACCOUNT_URL }}/frontend-prod:${{ needs.build-frontend.outputs.tag }}

      - name: "Deploy the task definition"
        uses: aws-actions/amazon-ecs-deploy-task-definition@f25cba814d2a2e7110ffd972010247dfd6f191dd  # v1.4.4
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: skole-prod-service
          cluster: skole-prod-cluster
          wait-for-service-stability: true

      - name: "Notify Slack"
        if: always()
        uses: rtCamp/action-slack-notify@f565a63638bd3615e76249bffab00fcb9dab90f7  # v2.1.3
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: "${{ job.status == 'success' && 'good' || 'danger' }}"
